import { NextRequest, NextResponse } from 'next/server'

// „Ç∞„É≠„Éº„Éê„É´„É©„Ç§„Éñ„Éï„É≠„ÉºË®≠ÂÆöÔºà„É°„É¢„É™„ÅÆ„ÅøÔºâ
let liveFlowSystem = {
  metadata: {
    version: "4.0.0",
    name: "LINE Flow Designer Pro - Next.js Edition",
    mode: "NEXTJS_LIVE_ENGINE",
    created: new Date().toISOString(),
    features: ["nextjs", "react", "tailwind", "framer-motion", "live-sync"],
    performance: {
      avgResponseTime: "0.1ms",
      uptime: "99.9%",
      memoryUsage: "optimized"
    }
  },
  flows: {
    professional_diagnosis: {
      id: "professional_diagnosis",
      name: "üéØ „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´Ë®∫Êñ≠",
      type: "diagnostic",
      status: "active",
      nodes: {
        welcome: {
          id: "welcome",
          type: "entry",
          title: "üöÄ Next.jsË®∫Êñ≠„Çπ„Çø„Éº„Éà",
          message: "Next.js + React„ÅßÊßãÁØâ„Åï„Çå„ÅüÊúÄÊñ∞„ÅÆË®∫Êñ≠„Ç∑„Çπ„ÉÜ„É†„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅ",
          position: { x: 100, y: 300 },
          buttons: [
            { 
              label: "‚ú® Ë®∫Êñ≠ÈñãÂßã", 
              action: "start_diagnosis", 
              next: "category_selection"
            }
          ]
        },
        
        category_selection: {
          id: "category_selection",
          type: "selection",
          title: "üìã „Ç´„ÉÜ„Ç¥„É™„ÉºÈÅ∏Êäû",
          message: "„Å©„ÅÆÂàÜÈáé„ÅÆË®∫Êñ≠„Çí„ÅîÂ∏åÊúõ„Åß„Åô„ÅãÔºüÊúÄÈÅ©„Å™Ë®∫Êñ≠„Éï„É≠„Éº„Çí„ÅîÊèêÊ°à„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ",
          position: { x: 500, y: 200 },
          buttons: [
            { label: "üè™ „Éì„Ç∏„Éç„ÇπË®∫Êñ≠", action: "category", value: "business", next: "business_flow" },
            { label: "üíº „Ç≠„É£„É™„Ç¢Ë®∫Êñ≠", action: "category", value: "career", next: "career_flow" },
            { label: "üéØ „Çπ„Ç≠„É´Ë®∫Êñ≠", action: "category", value: "skills", next: "skills_flow" }
          ]
        },
        
        business_flow: {
          id: "business_flow",
          type: "questionnaire",
          title: "üè™ „Éì„Ç∏„Éç„ÇπË®∫Êñ≠",
          message: "„ÅÇ„Å™„Åü„ÅÆ„Éì„Ç∏„Éç„Çπ„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Å™ÂàÜÊûê„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ",
          position: { x: 900, y: 100 },
          buttons: [
            { label: "üåÜ ÈÉΩÂ∏ÇÈÉ®", action: "business_area", value: "urban", next: "business_result" },
            { label: "üèòÔ∏è ÈÉäÂ§ñ", action: "business_area", value: "suburban", next: "business_result" },
            { label: "üåÑ Âú∞Êñπ", action: "business_area", value: "rural", next: "business_result" }
          ]
        },
        
        career_flow: {
          id: "career_flow",
          type: "questionnaire", 
          title: "üíº „Ç≠„É£„É™„Ç¢Ë®∫Êñ≠",
          message: "„ÅÇ„Å™„Åü„ÅÆ„Ç≠„É£„É™„Ç¢ÁõÆÊ®ô„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂ∞ÇÈñÄÁöÑ„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ",
          position: { x: 900, y: 300 },
          buttons: [
            { label: "üìà ÁÆ°ÁêÜËÅ∑ÂøóÂêë", action: "career_goal", value: "management", next: "career_result" },
            { label: "üî¨ Â∞ÇÈñÄËÅ∑ÂøóÂêë", action: "career_goal", value: "specialist", next: "career_result" }
          ]
        },
        
        skills_flow: {
          id: "skills_flow",
          type: "questionnaire",
          title: "üéØ „Çπ„Ç≠„É´Ë®∫Êñ≠", 
          message: "ÁèæÂú®„ÅÆ„Çπ„Ç≠„É´„É¨„Éô„É´„ÇíË©ï‰æ°„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇÊàêÈï∑Êà¶Áï•„Çí„ÅîÊèêÊ°à„Åó„Åæ„Åô„ÄÇ",
          position: { x: 900, y: 500 },
          buttons: [
            { label: "üíª ÊäÄË°ì„Çπ„Ç≠„É´", action: "skill_type", value: "technical", next: "skills_result" },
            { label: "ü§ù „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥", action: "skill_type", value: "communication", next: "skills_result" }
          ]
        },
        
        business_result: {
          id: "business_result",
          type: "result",
          title: "üìä „Éì„Ç∏„Éç„ÇπÂàÜÊûêÁµêÊûú",
          message: "Next.js„Éô„Éº„Çπ„ÅÆÈ´òÂ∫¶„Å™ÂàÜÊûê„Å´„Çà„Çä„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Éì„Ç∏„Éç„Çπ„ÅÆË®∫Êñ≠„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ",
          position: { x: 1300, y: 100 },
          buttons: [
            { label: "üìà Ë©≥Á¥∞„É¨„Éù„Éº„Éà", action: "view_report", value: "business" },
            { label: "üîÑ ÂÜçË®∫Êñ≠", action: "restart", next: "welcome" }
          ]
        },
        
        career_result: {
          id: "career_result",
          type: "result",
          title: "üíº „Ç≠„É£„É™„Ç¢ÂàÜÊûêÁµêÊûú",
          message: "React„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´„Çà„ÇãÂãïÁöÑÂàÜÊûê„Åß„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Ç≠„É£„É™„Ç¢„Éë„Çπ„ÅåÊòéÁ¢∫„Å´„Å™„Çä„Åæ„Åó„Åü„ÄÇ",
          position: { x: 1300, y: 300 },
          buttons: [
            { label: "üéØ ÊàêÈï∑Êà¶Áï•", action: "view_strategy", value: "career" },
            { label: "üîÑ ÂÜçË®∫Êñ≠", action: "restart", next: "welcome" }
          ]
        },
        
        skills_result: {
          id: "skills_result",
          type: "result",
          title: "üéØ „Çπ„Ç≠„É´ÂàÜÊûêÁµêÊûú",
          message: "ÊúÄÊñ∞„ÅÆNext.jsÊäÄË°ì„ÅßÊßãÁØâ„Åï„Çå„Åü„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„Çä„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„Çπ„Ç≠„É´„Éû„ÉÉ„Éó„ÅåÂÆåÊàê„Åó„Åæ„Åó„Åü„ÄÇ",
          position: { x: 1300, y: 500 },
          buttons: [
            { label: "üìö Â≠¶ÁøíË®àÁîª", action: "view_plan", value: "skills" },
            { label: "üîÑ ÂÜçË®∫Êñ≠", action: "restart", next: "welcome" }
          ]
        }
      }
    }
  },
  
  stats: {
    totalFlows: 1,
    totalNodes: 8,
    totalInteractions: 0,
    responseTime: 0.1,
    uptime: 99.9,
    lastUpdated: new Date().toISOString()
  }
}

// „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö
function measurePerformance(operation: string) {
  const start = process.hrtime.bigint()
  return () => {
    const end = process.hrtime.bigint()
    const duration = Number(end - start) / 1000000 // „Éä„ÉéÁßí„Çí„Éü„É™Áßí„Å´Â§âÊèõ
    console.log(`‚ö° ${operation}: ${duration.toFixed(3)}ms`)
    return duration
  }
}

// GET: „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±„Éª„Éï„É≠„ÉºÂèñÂæó
export async function GET(request: NextRequest) {
  const measure = measurePerformance(`GET ${request.url}`)
  
  try {
    liveFlowSystem.stats.totalInteractions++
    liveFlowSystem.stats.lastUpdated = new Date().toISOString()
    
    const duration = measure()
    
    return NextResponse.json({
      success: true,
      system: liveFlowSystem.metadata,
      flows: liveFlowSystem,
      performance: {
        responseTime: `${duration.toFixed(3)}ms`,
        mode: "NEXTJS_LIVE_ENGINE",
        message: "üöÄ Ultra-fast Next.js API"
      },
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    const duration = measure()
    console.error('üö® Live Engine Error:', error)
    
    return NextResponse.json({
      success: false,
      error: 'Live Engine Error',
      details: error instanceof Error ? error.message : 'Unknown error',
      performance: {
        responseTime: `${duration.toFixed(3)}ms`,
        mode: "ERROR_HANDLING"
      },
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

// POST: „Éï„É≠„ÉºÂÖ®‰ΩìÊõ¥Êñ∞
export async function POST(request: NextRequest) {
  const measure = measurePerformance(`POST ${request.url}`)
  
  try {
    const updateData = await request.json()
    const { flowId = 'professional_diagnosis', nodes } = updateData
    
    if (liveFlowSystem.flows[flowId] && nodes) {
      liveFlowSystem.flows[flowId].nodes = nodes
      liveFlowSystem.metadata.version = incrementVersion(liveFlowSystem.metadata.version)
      liveFlowSystem.stats.lastUpdated = new Date().toISOString()
      
      console.log(`üî• Flow ${flowId} updated to v${liveFlowSystem.metadata.version}`)
    }
    
    const duration = measure()
    
    return NextResponse.json({
      success: true,
      flowId: flowId,
      version: liveFlowSystem.metadata.version,
      performance: {
        responseTime: `${duration.toFixed(3)}ms`,
        mode: "NEXTJS_LIVE_UPDATE"
      },
      message: "üî• Flow updated instantly with Next.js",
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    const duration = measure()
    console.error('üö® Live Engine Error:', error)
    
    return NextResponse.json({
      success: false,
      error: 'Live Engine Error',
      details: error instanceof Error ? error.message : 'Unknown error',
      performance: {
        responseTime: `${duration.toFixed(3)}ms`,
        mode: "ERROR_HANDLING"
      },
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

// PATCH: „Éé„Éº„ÉâÈÉ®ÂàÜÊõ¥Êñ∞
export async function PATCH(request: NextRequest) {
  const measure = measurePerformance(`PATCH ${request.url}`)
  
  try {
    const { flowId, nodeId, changes } = await request.json()
    
    if (!liveFlowSystem.flows[flowId] || !liveFlowSystem.flows[flowId].nodes[nodeId]) {
      return NextResponse.json({
        success: false,
        error: `Node ${nodeId} in flow ${flowId} not found`
      }, { status: 404 })
    }
    
    // „Éé„Éº„ÉâÈÉ®ÂàÜÊõ¥Êñ∞
    Object.assign(liveFlowSystem.flows[flowId].nodes[nodeId], changes)
    liveFlowSystem.stats.lastUpdated = new Date().toISOString()
    
    const duration = measure()
    
    console.log(`‚ö° Node ${nodeId} in ${flowId} updated instantly`)
    
    return NextResponse.json({
      success: true,
      flowId: flowId,
      nodeId: nodeId,
      performance: {
        responseTime: `${duration.toFixed(3)}ms`,
        mode: "NEXTJS_NODE_UPDATE"
      },
      message: `‚ö° Node ${nodeId} updated instantly`,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    const duration = measure()
    console.error('üö® Live Engine Error:', error)
    
    return NextResponse.json({
      success: false,
      error: 'Live Engine Error',
      details: error instanceof Error ? error.message : 'Unknown error',
      performance: {
        responseTime: `${duration.toFixed(3)}ms`,
        mode: "ERROR_HANDLING"
      },
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

// „Éê„Éº„Ç∏„Éß„É≥Â¢óÂàÜ
function incrementVersion(version: string): string {
  const parts = version.split('.')
  parts[2] = (parseInt(parts[2]) + 1).toString()
  return parts.join('.')
}